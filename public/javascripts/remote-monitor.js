// Generated by CoffeeScript 1.7.1
(function() {
  var BaseClass, CONF, DEBUG, DeviceClass, EVENT, HOST, MonitorClass, PATH, PORT, TYPE,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HOST = '192.168.1.122';

  PORT = 9000;

  PATH = '/remote-monitor';

  DEBUG = 3;

  CONF = {
    iceServers: [
      {
        url: 'stun:stun.l.google.com:19302'
      }, {
        url: 'turn:homeo@turn.bistri.com:80',
        credential: 'homeo'
      }
    ]
  };

  this.ns = {};

  TYPE = {
    event: "event",
    message: "message",
    image: "image"
  };

  EVENT = {
    mic: {
      on: "mic-on",
      off: "mic-off"
    }
  };

  BaseClass = (function() {
    function BaseClass() {
      console.log("constructor of BaseClass");
      this.peer = new Peer({
        host: HOST,
        port: PORT,
        path: PATH,
        debug: DEBUG,
        config: CONF
      });
      this.ls = null;
      this.emc = null;
      this.edc = null;
      this.eh = null;
    }

    BaseClass.prototype.initialize = function(video, initializing, waiting) {
      console.log("initialize");
      initializing();
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      return navigator.getUserMedia({
        audio: true,
        video: true
      }, (function(_this) {
        return function(stream) {
          console.log("getUserMedia SuccessCallback");
          video.prop('src', URL.createObjectURL(stream));
          _this.ls = stream;
          _this.ls.getAudioTracks()[0].enabled = false;
          return waiting();
        };
      })(this), (function(_this) {
        return function() {
          console.log("getUserMedia ErrorCollback");
          if (_this.eh != null) {
            return _this.eh("getUserMedia fail");
          }
        };
      })(this));
    };

    BaseClass.prototype.onOpen = function(peerIDsetting) {
      if (peerIDsetting == null) {
        peerIDsetting = null;
      }
      console.log("onOpen");
      return this.peer.on('open', (function(_this) {
        return function() {
          console.log("peer.on 'open' peer.id=" + _this.peer.id);
          if (peerIDsetting != null) {
            return peerIDsetting(_this.peer.id);
          }
        };
      })(this));
    };

    BaseClass.prototype.onError = function(showError, waiting) {
      console.log("onError");
      this.eh = showError;
      return this.peer.on('error', (function(_this) {
        return function(err) {
          console.log("peer.on 'error': " + err.message);
          if (_this.eh != null) {
            _this.eh("peer.error: " + err.message);
          }
          return waiting();
        };
      })(this));
    };

    BaseClass.prototype.closeCall = function() {
      console.log("closeCall");
      if (this.emc != null) {
        this.emc.close();
      }
      if (this.edc != null) {
        return this.edc.close();
      }
    };

    BaseClass.prototype.terminate = function() {
      console.log("terminate");
      if (this.emc != null) {
        this.emc.close();
      }
      if (this.edc != null) {
        this.edc.close();
      }
      if (this.peer != null) {
        return this.peer.destroy();
      }
    };

    BaseClass.prototype.connect = function(mediaConnection, video, connecting, waiting) {
      console.log("connect");
      if (this.emc != null) {
        this.emc.close();
      }
      this.emc = mediaConnection;
      mediaConnection.on('stream', (function(_this) {
        return function(stream) {
          console.log("mediaConnection.on 'stream'");
          video.prop('src', URL.createObjectURL(stream));
          return connecting();
        };
      })(this));
      return mediaConnection.on('close', (function(_this) {
        return function() {
          console.log("mediaConnection.on 'close'");
          _this.ls.getAudioTracks()[0].enabled = false;
          if (_this.ems != null) {
            _this.ems.close();
          }
          return waiting();
        };
      })(this));
    };

    return BaseClass;

  })();

  DeviceClass = (function(_super) {
    __extends(DeviceClass, _super);

    function DeviceClass() {
      console.log("constructor of DeviceClass");
      DeviceClass.__super__.constructor.call(this);
    }

    DeviceClass.prototype.onCall = function(video, connecting, waiting) {
      console.log("onCall");
      return this.peer.on('call', (function(_this) {
        return function(mediaConnection) {
          console.log("peer.on 'call'");
          mediaConnection.answer(_this.ls);
          return _this.connect(mediaConnection, video, connecting, waiting);
        };
      })(this));
    };

    DeviceClass.prototype.onConnection = function(messageHandler, imageHandler) {
      if (messageHandler == null) {
        messageHandler = null;
      }
      if (imageHandler == null) {
        imageHandler = null;
      }
      console.log("onConnection");
      return this.peer.on('connection', (function(_this) {
        return function(dataConnection) {
          console.log("peer.on 'connection'");
          dataConnection.on('open', function() {
            console.log("dataConnection.on 'open'");
            if (_this.edc != null) {
              _this.edc.close();
            }
            return _this.edc = dataConnection;
          });
          dataConnection.on('data', function(data) {
            console.log("dataConnection.on 'data' " + (JSON.stringify(data)));
            switch (data.type) {
              case TYPE.event:
                console.log("event received:" + data.payload);
                return _this.__eventHandler(data.payload);
              case TYPE.message:
                console.log("message received:" + data.payload);
                if (messageHandler) {
                  return messageHandler(data.payload);
                }
                break;
              case TYPE.image:
                console.log("image received:" + data.payload);
                if (imageHandler) {
                  return imageHandler(data.payload);
                }
                break;
              default:
                return console.log("unknown data type");
            }
          });
          return dataConnection.on('close', function() {
            console.log("dataConnection.on 'close'");
            if (_this.edc != null) {
              return _this.edc.close();
            }
          });
        };
      })(this));
    };

    DeviceClass.prototype.__eventHandler = function(event) {
      console.log("__eventHandler event:" + event);
      switch (event) {
        case EVENT.mic.on:
          console.log("event: mic-on");
          return this.ls.getAudioTracks()[0].enabled = true;
        case EVENT.mic.off:
          console.log("event: mic-off");
          return this.ls.getAudioTracks()[0].enabled = false;
        default:
          return console.log("event: unknown");
      }
    };

    return DeviceClass;

  })(BaseClass);

  MonitorClass = (function(_super) {
    __extends(MonitorClass, _super);

    function MonitorClass() {
      console.log("constructor of MonitorClass");
      MonitorClass.__super__.constructor.call(this);
    }

    MonitorClass.prototype.makeCall = function(callto, video, connecting, waiting) {
      var dataConnection, mediaConnection;
      console.log("makeCall : " + callto);
      this.callto = callto;
      mediaConnection = this.peer.call(callto, this.ls);
      this.connect(mediaConnection, video, connecting, waiting);
      dataConnection = this.peer.connect(callto, {
        reliable: true
      });
      dataConnection.on('open', (function(_this) {
        return function() {
          console.log("dataConnection.on 'open'");
          if (_this.edc != null) {
            _this.edc.close();
          }
          return _this.edc = dataConnection;
        };
      })(this));
      return dataConnection.on('close', function() {
        console.log("dataConnection.on 'close'");
        if (this.edc != null) {
          return this.edc.close;
        }
      });
    };

    MonitorClass.prototype.toggleMIC = function() {
      var state;
      state = this.ls.getAudioTracks()[0].enabled;
      console.log("toggleMIC state:" + state);
      this.ls.getAudioTracks()[0].enabled = !state;
      if (state) {
        return this.__send(TYPE.event, EVENT.mic.off);
      } else {
        return this.__send(TYPE.event, EVENT.mic.on);
      }
    };

    MonitorClass.prototype.sendMessage = function(message) {
      console.log("sendMessage: " + message);
      return this.__send(TYPE.message, message);
    };

    MonitorClass.prototype.sendImage = function(image) {
      console.log("sendImage: " + image);
      return this.__send(TYPE.image, image);
    };

    MonitorClass.prototype.__send = function(type, payload) {
      var data;
      if ((this.edc != null) && this.edc.open) {
        data = {
          type: type,
          payload: payload
        };
        this.edc.send(data);
        return console.log("sent object:" + (JSON.stringify(data)));
      } else {
        console.log("dataConnection is lost");
        if (this.eh != null) {
          return this.eh("dataConnection is lost");
        }
      }
    };

    return MonitorClass;

  })(BaseClass);

  this.ns.DeviceClass = DeviceClass;

  this.ns.MonitorClass = MonitorClass;

}).call(this);
